1) git reset:
	its quite similar to get checkout but the major diffrence is that in get checkout only head pointer changes whereas due to reset command head as well as master pointer changes to given branch

2) git revert:
       The git revert command is used for undoing changes to a repository's commit history.A revert operation will take the specified commit, inverse the changes from that commit, and create a new "revert commit".

3) git cherry-pick:
	Cherry picking is the act of picking a commit from a branch and applying it to another.  For example, say a commit is accidently made to the wrong branch. You can switch to the correct branch and cherry-pick the commit to where it should belong.

4) git rebase:
	 For example, say a commit is accidently made to the wrong branch. You can switch to the correct branch and cherry-pick the commit to where it should belong.

5) git rebase vs merge:
	f you would prefer a clean, linear history free of unnecessary merge commits, you should reach for git rebase instead of git merge when integrating changes from another branch
On the other hand, if you want to preserve the complete history of your project and avoid the risk of re-writing public commits, you can stick with git merge. Either option is perfectly valid, but at least now you have the option of leveraging the benefits of git rebase. 	
